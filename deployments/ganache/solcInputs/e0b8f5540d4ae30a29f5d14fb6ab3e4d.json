{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "contracts/GameItem.sol": {
      "content": "// SPDX-License-Identifier: SEE LICENSE IN LICENSE\r\npragma solidity ^0.8.7;\r\n\r\n\r\ncontract GameItem {\r\n    \r\n}"
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier: SEE LICENSE IN LICENSE\r\npragma solidity ^0.8.7;\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\r\n\r\nlibrary PriceConverter {\r\n\r\n    function getPrice(AggregatorV3Interface priceFeed) internal view returns(uint256){\r\n        \r\n        (, int price,,,) = priceFeed.latestRoundData();\r\n       \r\n        return uint256(price);\r\n    }\r\n\r\n\r\n    function getConversionRate(uint256 ethAmount, AggregatorV3Interface priceFeed) internal view returns (uint256) {\r\n        uint256 ethPrice = getPrice(priceFeed);\r\n       \r\n        uint256 ethAmountUsd = ethPrice * ethAmount / 1e8;\r\n        return ethAmountUsd;\r\n    }\r\n}"
    },
    "contracts/Token.sol": {
      "content": "// SPDX-License-Identifier: SEE LICENSE IN LICENSE\r\npragma solidity ^0.8.7;\r\nimport \"./PriceConverter.sol\";\r\nimport \"./Wallet.sol\";\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\r\n\r\n\r\nerror Token_NotOwner();\r\nerror Token_NoWalletAddress();\r\n\r\ncontract Token {\r\n    \r\n    using PriceConverter for uint256;\r\n    uint256 public constant usdPerToken = 20 *  1e18;  // 20.[18zeroes]\r\n    AggregatorV3Interface public priceFeed;\r\n    address public immutable owner;\r\n\r\n    constructor(address _api) {\r\n        owner = msg.sender;\r\n        priceFeed = AggregatorV3Interface(_api);\r\n    }\r\n\r\n    receive() external payable{\r\n        revert Token_NoWalletAddress();\r\n    } \r\n\r\n    fallback() external payable{\r\n        revert Token_NoWalletAddress();\r\n    }\r\n\r\n    function sendToken(address walletAddress) public payable {\r\n        uint256 usdSent = msg.value.getConversionRate(priceFeed);\r\n        require(usdSent >= usdPerToken, \"Didn't Sent enough!\");\r\n        Wallet wallet = Wallet(walletAddress);\r\n        uint256 tokenNeedToSend = usdSent * 1e8 / usdPerToken;\r\n        wallet.receiveToken(tokenNeedToSend);\r\n    }\r\n\r\n    function withDraw() public onlyOwner{\r\n        (bool CallSuccess,) = payable(msg.sender).call{value: address(this).balance}(\"\");\r\n        require(CallSuccess, \"Call Failed\");\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        if(msg.sender != owner) {revert Token_NotOwner();}\r\n        _;\r\n    }\r\n}"
    },
    "contracts/Wallet.sol": {
      "content": "// SPDX-License-Identifier: SEE LICENSE IN LICENSE\r\npragma solidity ^0.8.7;\r\nimport \"./GameItem.sol\";\r\n\r\ncontract Wallet {\r\n    \r\n    uint256 private gameToken = 10 * 1e8;\r\n    uint256 private constant decimal = 1e8;\r\n    address private owner;\r\n    address[] private ownedItems;    \r\n    \r\n    \r\n    constructor () {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function getOwner() public view returns(address) {\r\n        return owner;\r\n    } \r\n\r\n    function availableToken() public view returns(uint256) {\r\n        return gameToken;\r\n    }\r\n\r\n    function getItem(uint256 index) public view returns(address) {\r\n        return ownedItems[index];\r\n    } \r\n\r\n    function receiveToken(uint256 tokens) public {\r\n        gameToken += tokens;\r\n    }\r\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}