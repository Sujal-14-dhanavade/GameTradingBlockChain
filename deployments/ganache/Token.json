{
  "address": "0x738FDdaC10B28B20a51eB8dC1f0bE9B6f806FC1B",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_api",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "Token_NoWalletAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Token_NotOwner",
      "type": "error"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "walletAddress",
          "type": "address"
        }
      ],
      "name": "sendToken",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdPerToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withDraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x148f6c09f137fda314f0ab495b4ce95c39ff5c4403eda4eb0413afa524c5f06c",
  "receipt": {
    "to": null,
    "from": "0xad36C95ddF15C9f52468F7A337231735d9B032a1",
    "contractAddress": "0x738FDdaC10B28B20a51eB8dC1f0bE9B6f806FC1B",
    "transactionIndex": 0,
    "gasUsed": "604762",
    "logsBloom": "0x
    "blockHash": "0xe3955dc8782d9d03994ab920be336c1670c5caa14ee3000c2af2fbc95abdcbd8",
    "transactionHash": "0x148f6c09f137fda314f0ab495b4ce95c39ff5c4403eda4eb0413afa524c5f06c",
    "logs": [],
    "blockNumber": 101,
    "cumulativeGasUsed": "604762",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x82e095Df381007A26f051e9a2D832EE96A937A29"
  ],
  "numDeployments": 1,
  "solcInputHash": "5b0d528920f2e13c186e2ff508632852",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_api\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Token_NoWalletAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Token_NotOwner\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"}],\"name\":\"sendToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withDraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Token.sol\":\"Token\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"contracts/GameItem.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\ncontract GameItem {\\r\\n\\r\\n    // store address of all the owners of particular item as in game one item can be owned by multiple owners\\r\\n    address[] public owners;\\r\\n\\r\\n    // attributes related to item\\r\\n    string public name;\\r\\n    string public typeOf;\\r\\n    uint256 public level;\\r\\n    string public version;\\r\\n\\r\\n    // initializing item \\r\\n    constructor(string memory _name, string memory _typeOf, uint256 _level, string memory _version) {\\r\\n        name = _name;\\r\\n        typeOf= _typeOf;\\r\\n        level = _level;\\r\\n        version = _version;\\r\\n    }\\r\\n\\r\\n    function getName() public view returns(string memory){\\r\\n        return name;\\r\\n    }\\r\\n\\r\\n    function getTypeOf() public view returns(string memory){\\r\\n        return typeOf;\\r\\n    }\\r\\n\\r\\n    function getLevel() public view returns(uint256){\\r\\n        return level;\\r\\n    }\\r\\n\\r\\n    function getVersion() public view returns(string memory){\\r\\n        return version;\\r\\n    }\\r\\n\\r\\n    function getOwner(uint256 index) public view returns(address){\\r\\n        return owners[index];\\r\\n    }\\r\\n    // adding owner if item is sold\\r\\n    function addOwner(address buyer) public {\\r\\n        owners.push(buyer);\\r\\n    }\\r\\n\\r\\n    //getting owners array\\r\\n    function getOwners() public view returns(address[] memory) {\\r\\n        return owners;\\r\\n    }\\r\\n\\r\\n    // trading item with another item\\r\\n\\r\\n    function tradeOwner(address buyer, address seller) public {\\r\\n        for(uint i = 0; i < owners.length; i++) {\\r\\n            if(owners[i] == seller) {\\r\\n                owners[i] = buyer;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function isOwner(address _owner) public view returns(bool) {\\r\\n        for(uint i = 0; i < owners.length; i++) {\\r\\n            if(owners[i] == _owner) {\\r\\n                return true;\\r\\n            }\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n}\",\"keccak256\":\"0x2e4200e197fc0706d0bd9c13097219e5ddcbcf87a8bc477a124a92f9b099555a\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\r\\npragma solidity ^0.8.7;\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\r\\n\\r\\nlibrary PriceConverter {\\r\\n\\r\\n    function getPrice(AggregatorV3Interface priceFeed) internal view returns(uint256){\\r\\n        \\r\\n        (, int price,,,) = priceFeed.latestRoundData();\\r\\n       \\r\\n        return uint256(price);\\r\\n    }\\r\\n\\r\\n\\r\\n    function getConversionRate(uint256 ethAmount, AggregatorV3Interface priceFeed) internal view returns (uint256) {\\r\\n        uint256 ethPrice = getPrice(priceFeed);\\r\\n       \\r\\n        uint256 ethAmountUsd = ethPrice * ethAmount / 1e8;\\r\\n        return ethAmountUsd;\\r\\n    }\\r\\n}\",\"keccak256\":\"0x4237e8a93fd6933b5fb1ac3589223e56e3310f1b9a434f203d22e9f761447b41\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/Token.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\n// contains library function for ethereum to usd comparision\\r\\nimport \\\"./PriceConverter.sol\\\";\\r\\n\\r\\n// wallet contract\\r\\nimport \\\"./Wallet.sol\\\";\\r\\n\\r\\n// priceFeed contract for conversion\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\r\\n\\r\\n\\r\\n// custom errors\\r\\nerror Token_NotOwner();\\r\\nerror Token_NoWalletAddress();\\r\\n\\r\\ncontract Token {\\r\\n    \\r\\n    using PriceConverter for uint256;\\r\\n    uint256 public constant usdPerToken = 20 *  1e18;  // setting usd per token price\\r\\n    AggregatorV3Interface public priceFeed; // priceFeed contract\\r\\n    address public immutable owner; // storing owner of token contract\\r\\n\\r\\n    constructor(address _api) {\\r\\n        owner = msg.sender;  // initializing owner to whoever deploying contract\\r\\n        priceFeed = AggregatorV3Interface(_api);\\r\\n    }\\r\\n\\r\\n    // removing direct ethereum sending functonalitites\\r\\n    receive() external payable{\\r\\n        revert Token_NoWalletAddress();\\r\\n    } \\r\\n\\r\\n    fallback() external payable{\\r\\n        revert Token_NoWalletAddress();\\r\\n    }\\r\\n\\r\\n\\r\\n    // it will send token to particular wallet address when user sends valid price\\r\\n    function sendToken(address walletAddress) public payable {\\r\\n        // getting usd sent to contract in the form of ethers\\r\\n        uint256 usdSent = msg.value.getConversionRate(priceFeed);\\r\\n        require(usdSent >= usdPerToken, \\\"Didn't Sent enough!\\\");\\r\\n        Wallet wallet = Wallet(walletAddress);\\r\\n        uint256 tokenNeedToSend = (usdSent * 1e8) / usdPerToken;\\r\\n        // sending calculated token to wallet\\r\\n        wallet.receiveToken(tokenNeedToSend);\\r\\n    }\\r\\n\\r\\n    // withdraw functionalities for owner to get all ethereum stored in contract\\r\\n    function withDraw() public onlyOwner{\\r\\n        (bool CallSuccess,) = payable(msg.sender).call{value: address(this).balance}(\\\"\\\");\\r\\n        require(CallSuccess, \\\"Call Failed\\\");\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner {\\r\\n        if(msg.sender != owner) {revert Token_NotOwner();}\\r\\n        _;\\r\\n    }\\r\\n}\",\"keccak256\":\"0x9c3ae818076c264fd6adaf17453b141da00b710abdb0e54d9abf8c40399e38c4\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/Wallet.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\r\\npragma solidity ^0.8.7;\\r\\nimport \\\"./GameItem.sol\\\";\\r\\n\\r\\n\\r\\nerror Wallet_NotOwner();\\r\\n\\r\\ncontract Wallet {\\r\\n    \\r\\n    // default token = 10 per wallet account\\r\\n    uint256 private gameToken = 10 * 1e8;\\r\\n    uint256 private constant decimal = 1e8; // decimal point for token\\r\\n    address private owner; // owner of wallet\\r\\n    address[] private ownedItems;    // items owned by this account\\r\\n    \\r\\n    \\r\\n    // setting owner of wallet\\r\\n    constructor (address _owner) {\\r\\n        owner = _owner;\\r\\n    }\\r\\n\\r\\n    function getOwner() public view returns(address) {\\r\\n        return owner;\\r\\n    } \\r\\n\\r\\n    function availableToken() public view returns(uint256) {\\r\\n        return gameToken;\\r\\n    }\\r\\n\\r\\n    function getItem(uint256 index) public view returns(address) {\\r\\n        return ownedItems[index];\\r\\n    }\\r\\n\\r\\n    function getItems() public view returns(address[] memory) {\\r\\n        return ownedItems;\\r\\n    } \\r\\n\\r\\n    // incrementing tokens received by token contract\\r\\n    function receiveToken(uint256 tokens) external {\\r\\n        gameToken += tokens;\\r\\n    }\\r\\n\\r\\n    // buying item based on item address and decrementing its price\\r\\n    function buyItem(address item, uint256 sellingToken) external {\\r\\n        gameToken -= sellingToken;\\r\\n        ownedItems.push(item);\\r\\n    }\\r\\n\\r\\n    function addCreateItem(address item) external {\\r\\n        ownedItems.push(item);\\r\\n    }\\r\\n\\r\\n    function swapItem(address itemSwapped, address newItem) external {\\r\\n        for(uint i = 0; i < ownedItems.length; i++) {\\r\\n            if(ownedItems[i] == itemSwapped) {\\r\\n                ownedItems[i] = newItem;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"keccak256\":\"0xe2265e6cd6988906e2a4bbd03dd2f7783aafd04c2d88193adce7daf9142904d1\",\"license\":\"SEE LICENSE IN LICENSE\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b50604051610ae9380380610ae98339818101604052810190610032919061010f565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505061013c565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100dc826100b1565b9050919050565b6100ec816100d1565b81146100f757600080fd5b50565b600081519050610109816100e3565b92915050565b600060208284031215610125576101246100ac565b5b6000610133848285016100fa565b91505092915050565b60805161098b61015e6000396000818161016d01526102d2015261098b6000f3fe60806040526004361061004e5760003560e01c80630fdb1c10146100b75780631321e098146100ce578063741bef1a146100f95780638da5cb5b14610124578063c575c2381461014f57610085565b36610085576040517f554836d800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f554836d800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3480156100c357600080fd5b506100cc61016b565b005b3480156100da57600080fd5b506100e361029f565b6040516100f091906104e7565b60405180910390f35b34801561010557600080fd5b5061010e6102ac565b60405161011b9190610581565b60405180910390f35b34801561013057600080fd5b506101396102d0565b60405161014691906105bd565b60405180910390f35b61016960048036038101906101649190610609565b6102f4565b005b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146101f0576040517fd9331abd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60003373ffffffffffffffffffffffffffffffffffffffff164760405161021690610667565b60006040518083038185875af1925050503d8060008114610253576040519150601f19603f3d011682016040523d82523d6000602084013e610258565b606091505b505090508061029c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610293906106d9565b60405180910390fd5b50565b6801158e460913d0000081565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b600061032960008054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461041590919063ffffffff16565b90506801158e460913d00000811015610377576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161036e90610745565b60405180910390fd5b600082905060006801158e460913d000006305f5e100846103989190610794565b6103a29190610805565b90508173ffffffffffffffffffffffffffffffffffffffff166337df00c9826040518263ffffffff1660e01b81526004016103dd91906104e7565b600060405180830381600087803b1580156103f757600080fd5b505af115801561040b573d6000803e3d6000fd5b5050505050505050565b6000806104218361044d565b905060006305f5e10085836104369190610794565b6104409190610805565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa15801561049b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104bf91906108da565b50505091505080915050919050565b6000819050919050565b6104e1816104ce565b82525050565b60006020820190506104fc60008301846104d8565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061054761054261053d84610502565b610522565b610502565b9050919050565b60006105598261052c565b9050919050565b600061056b8261054e565b9050919050565b61057b81610560565b82525050565b60006020820190506105966000830184610572565b92915050565b60006105a782610502565b9050919050565b6105b78161059c565b82525050565b60006020820190506105d260008301846105ae565b92915050565b600080fd5b6105e68161059c565b81146105f157600080fd5b50565b600081359050610603816105dd565b92915050565b60006020828403121561061f5761061e6105d8565b5b600061062d848285016105f4565b91505092915050565b600081905092915050565b50565b6000610651600083610636565b915061065c82610641565b600082019050919050565b600061067282610644565b9150819050919050565b600082825260208201905092915050565b7f43616c6c204661696c6564000000000000000000000000000000000000000000600082015250565b60006106c3600b8361067c565b91506106ce8261068d565b602082019050919050565b600060208201905081810360008301526106f2816106b6565b9050919050565b7f4469646e27742053656e7420656e6f7567682100000000000000000000000000600082015250565b600061072f60138361067c565b915061073a826106f9565b602082019050919050565b6000602082019050818103600083015261075e81610722565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061079f826104ce565b91506107aa836104ce565b92508282026107b8816104ce565b915082820484148315176107cf576107ce610765565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610810826104ce565b915061081b836104ce565b92508261082b5761082a6107d6565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b61085581610836565b811461086057600080fd5b50565b6000815190506108728161084c565b92915050565b6000819050919050565b61088b81610878565b811461089657600080fd5b50565b6000815190506108a881610882565b92915050565b6108b7816104ce565b81146108c257600080fd5b50565b6000815190506108d4816108ae565b92915050565b600080600080600060a086880312156108f6576108f56105d8565b5b600061090488828901610863565b955050602061091588828901610899565b9450506040610926888289016108c5565b9350506060610937888289016108c5565b925050608061094888828901610863565b915050929550929590935056fea2646970667358221220e8fd920198c4d032db51b1bd04c9c1788e79f98476f0327ca88a82a446b9998d64736f6c63430008110033",
  "deployedBytecode": "0x60806040526004361061004e5760003560e01c80630fdb1c10146100b75780631321e098146100ce578063741bef1a146100f95780638da5cb5b14610124578063c575c2381461014f57610085565b36610085576040517f554836d800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f554836d800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3480156100c357600080fd5b506100cc61016b565b005b3480156100da57600080fd5b506100e361029f565b6040516100f091906104e7565b60405180910390f35b34801561010557600080fd5b5061010e6102ac565b60405161011b9190610581565b60405180910390f35b34801561013057600080fd5b506101396102d0565b60405161014691906105bd565b60405180910390f35b61016960048036038101906101649190610609565b6102f4565b005b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146101f0576040517fd9331abd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60003373ffffffffffffffffffffffffffffffffffffffff164760405161021690610667565b60006040518083038185875af1925050503d8060008114610253576040519150601f19603f3d011682016040523d82523d6000602084013e610258565b606091505b505090508061029c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610293906106d9565b60405180910390fd5b50565b6801158e460913d0000081565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b600061032960008054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461041590919063ffffffff16565b90506801158e460913d00000811015610377576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161036e90610745565b60405180910390fd5b600082905060006801158e460913d000006305f5e100846103989190610794565b6103a29190610805565b90508173ffffffffffffffffffffffffffffffffffffffff166337df00c9826040518263ffffffff1660e01b81526004016103dd91906104e7565b600060405180830381600087803b1580156103f757600080fd5b505af115801561040b573d6000803e3d6000fd5b5050505050505050565b6000806104218361044d565b905060006305f5e10085836104369190610794565b6104409190610805565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa15801561049b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104bf91906108da565b50505091505080915050919050565b6000819050919050565b6104e1816104ce565b82525050565b60006020820190506104fc60008301846104d8565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061054761054261053d84610502565b610522565b610502565b9050919050565b60006105598261052c565b9050919050565b600061056b8261054e565b9050919050565b61057b81610560565b82525050565b60006020820190506105966000830184610572565b92915050565b60006105a782610502565b9050919050565b6105b78161059c565b82525050565b60006020820190506105d260008301846105ae565b92915050565b600080fd5b6105e68161059c565b81146105f157600080fd5b50565b600081359050610603816105dd565b92915050565b60006020828403121561061f5761061e6105d8565b5b600061062d848285016105f4565b91505092915050565b600081905092915050565b50565b6000610651600083610636565b915061065c82610641565b600082019050919050565b600061067282610644565b9150819050919050565b600082825260208201905092915050565b7f43616c6c204661696c6564000000000000000000000000000000000000000000600082015250565b60006106c3600b8361067c565b91506106ce8261068d565b602082019050919050565b600060208201905081810360008301526106f2816106b6565b9050919050565b7f4469646e27742053656e7420656e6f7567682100000000000000000000000000600082015250565b600061072f60138361067c565b915061073a826106f9565b602082019050919050565b6000602082019050818103600083015261075e81610722565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061079f826104ce565b91506107aa836104ce565b92508282026107b8816104ce565b915082820484148315176107cf576107ce610765565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610810826104ce565b915061081b836104ce565b92508261082b5761082a6107d6565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b61085581610836565b811461086057600080fd5b50565b6000815190506108728161084c565b92915050565b6000819050919050565b61088b81610878565b811461089657600080fd5b50565b6000815190506108a881610882565b92915050565b6108b7816104ce565b81146108c257600080fd5b50565b6000815190506108d4816108ae565b92915050565b600080600080600060a086880312156108f6576108f56105d8565b5b600061090488828901610863565b955050602061091588828901610899565b9450506040610926888289016108c5565b9350506060610937888289016108c5565b925050608061094888828901610863565b915050929550929590935056fea2646970667358221220e8fd920198c4d032db51b1bd04c9c1788e79f98476f0327ca88a82a446b9998d64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1050,
        "contract": "contracts/Token.sol:Token",
        "label": "priceFeed",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      }
    }
  }
}